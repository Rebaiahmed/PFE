 //-----------____________-------------________
    //-----------Passport local signup -_-_-_-_-_-
    //-----------____________-------------________

    passport.use('local-signup', new localStraetgy({

                usernameField : 'email',
                passwordField : 'password',
                passReqToCallback : true
            },






            function(req,email,password,done){


                process.nextTick(function()
                {
                    //check if the user exist in the database

                    User.findOne({where : {email : email}}).then(function(user)
                    {

                        if(user)
                        {

                            return done(null,false,req.flash('signupMessage', 'that email is already in used'))
                        } // end if
                        else
                        {
                            //store it in the database

                            User.create({email : email, password : password}).then(function(user)
                            {
                                return done(null,user);

                            }) // end of createUser



                        } // end else







                    }) // end findOne





                })//end of nextTick






            }//end of function


        )//end of localStrategy

    )//end of passport use





//client
"use strict";


var Sequelize = require('sequelize');
var sequelize = new Sequelize('Base_pfe','root','root');
var crypto= require('crypto');
var jwt = require('jsonwebtoken');






var Client = sequelize.define('Client', {
        id: { type: Sequelize.INTEGER, unique: true,primaryKey:true },
        email: { type: Sequelize.STRING, unique: true },
        name : Sequelize.STRING,
        hash: Sequelize.STRING,
        salt: Sequelize.STRING
    },

    {

        freezeTableName : true, // the same name of the table
        timestamps : false, // eliminate updateAT and createAt
        instanceMethods: {

            getFullname: function() {
                return [this.name, this.email].join(' ');
            },
            setPassword : function(password){
                this.salt = crypto.randomBytes(16).toString('hex');
                this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
            },

            validPassword: function(password) {
                var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
                return this.hash === hash;
            },
            generateJwt : function(){
                var expiry = new Date();
                //set the date of sesisin to 7 days
                expiry.setDate(expiry.getDate+ 7);

                return jwt.sign({
                        _id  :this.id,
                        email :this.email,
                        name : this.name
                    },
                    "My Secret");
            }


        }
    })


/*
 tets for the build method
 */

/*var client = Client.build({name :'ahmed', email:'gg@mail.com'});
 console.log(client.name);
 client.setPassword('hhhh');
 client.save().then(function(){
 console.log('saved !!');
 })*/




/*console.log(Client.findById(1).then(function(user){
 console.log(user.getFullname());
 user.setPassword('ahmed');
 console.log(user.salt)
 console.log(user.validPassword('ahmed'));
 }));*/