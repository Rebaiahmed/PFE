{
  "name": "ipp",
  "version": "1.0.0",
  "description": "Internet Printing Protocol (IPP) for nodejs",
  "keywords": [
    "ipp",
    "print",
    "printing"
  ],
  "homepage": "http://github.com/williamkapke/ipp",
  "repository": {
    "type": "git",
    "url": "https://github.com/williamkapke/ipp.git"
  },
  "author": {
    "name": "William Kapke",
    "email": "william.kapke@gmail.com"
  },
  "devDependencies": {
    "mdns2": "*",
    "pdfkit": "*"
  },
  "main": "ipp.js",
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "readme": "# Internet Printing Protocol (IPP) for nodejs\n---\n\nA pure Javascript implementation of the IPP/2.0 protocol that has no dependencies.\n\nThe IPP protocol was started in the 90's and is still being worked on today. It is a very indepth protocol that spans many \nRFCs- some of which are dead while others were herded into IPP/v2.x.\n\nThere are millions of printers that support IPP. If you have one, this module will allow you to send/recieve data to/from \nthe printer.\n\nTo find out if your printer supports IPP:\n\n* Google your printer's specs\n* Try: `telnet YOUR_PRINTER 631`. If it connects, that's a good sign.\n* Use the ['/examples/findPrinters.js'](https://github.com/williamkapke/ipp/tree/master/examples/findPrinters.js) script.\n\nI have a pretty good starting point here. I created reference files \n(`attributes`, `enums`, `keywords`, `operations`, `status-codes`, `versions` and `tags`) and tried to include as many \nlinks in the comments to the ref docs as I could.\n\n\n### Install\n```bash\n$ npm install ipp\n```\n\n\n## Printer(url [,options])\n```javascript\nvar ipp = require('ipp');\nvar PDFDocument = require('pdfkit');\n\n//make a PDF document\nvar doc = new PDFDocument({margin:0});\ndoc.text(\".\", 0, 780);\n\ndoc.output(function(pdf){\n\tvar printer = ipp.Printer(\"http://NPI977E4E.local.:631/ipp/printer\");\n\tvar msg = {\n\t\t\"operation-attributes-tag\": {\n\t\t\t\"requesting-user-name\": \"William\",\n\t\t\t\"job-name\": \"My Test Job\",\n\t\t\t\"document-format\": \"application/pdf\"\n\t\t},\n\t\tdata: pdf\n\t};\n\tprinter.execute(\"Print-Job\", msg, function(err, res){\n\t\tconsole.log(res);\n\t});\n});\n```\n\nTo interact with a printer, create a `Printer` object.\n\n> Technically speaking: a `Printer` object does not need to be an actual printer. According to the IPP spec, it\n> could be any endpoint that accepts IPP messages. For example; the IPP object __could__ be persistant media- like a\n> CD ROM, hard drive, thumb drive, ...etc.\n\n**options:**\n* `charset` - Specifies the value for the 'attributes-charset' attribute of requests. Defaults to `utf-8`.\n* `language` - Specifies the value for the 'attributes-natural-language' attribute of requests. Defaults to `en-us`.\n* `uri` - Specifies the value for the 'printer-uri' attribute of requests. Defaults to `ipp://+url.host+url.path`.\n* `version` - Specifies the value for the 'version' attribute of requests. Defaults to `2.0`.\n\n\n\n\n\n### printer.execute(operation, message, callback)\nExecutes an IPP operation on the Printer object.\n\n* 'operation' - There are many operations defined by IPP. See: [/lib/enums.js](https://github.com/williamkapke/ipp/blob/master/lib/enums.js#L52).\n* 'message - A javascript object to be serealized into an IPP binary message.\n* 'callback(err, response)' - A function to callback with the Printer's response.\n\n## ipp.parse(buffer)\n\nParses a binary IPP message into a javascript object tree.\n\n```javascript\nvar ipp = require('ipp');\nvar data = new Buffer(\n    '0200' +\t//version 2.0\n\t\t'000B' +\t//Get-Printer-Attributes\n\t\t'00000001'+\t//reqid\n\t\t'01' +\t\t//operation-attributes-tag\n\t\t//blah blah the required bloat of this protocol\n\t\t'470012617474726962757465732d6368617273657400057574662d3848001b617474726962757465732d6e61747572616c2d6c616e67756167650002656e' +\n\t\t'03'\t\t//end-of-attributes-tag\n\t,'hex');\n\n\nvar result = ipp.parse(data);\nconsole.log(JSON.stringify(result,null,2));\n//  ta-da!\n//{\n//\t\"version\": \"2.0\",\n//\t\"operation\": 11,\n//\t\"id\": 1,\n//\t\"operation-attributes-tag\": {\n//\t\t\"attributes-charset\": \"utf-8\",\n//\t\t\"attributes-natural-language\": \"en\"\n//\t}\n//}\n```\n\n## ipp.serialize(msg)\nConverts an IPP message object to IPP binary.\n\nSee [request](#request) for example.\n\n<a id=\"request\"></a>\n## ipp.request(url, data, callback)\n\nMakes an IPP request to a url.\n\n```javascript\nvar ipp = require('ipp');\nvar uri = \"your_printer\";\nvar data = ipp.serialize({\n\t\"operation\":\"Get-Printer-Attributes\",\n\t\"operation-attributes-tag\": {\n\t\t\"attributes-charset\": \"utf-8\",\n\t\t\"attributes-natural-language\": \"en\",\n\t\t\"printer-uri\": uri\n\t}\n});\n\nipp.request(uri, data, function(err, res){\n\tif(err){\n\t\treturn console.log(err);\n\t}\n\tconsole.log(JSON.stringify(res,null,2));\n})\n//  ta-da!.. hopefully you'll see a ton of stuff from your printer\n```\n\n## Browser Support?\nSee [this thread](https://github.com/williamkapke/ipp/issues/3)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/williamkapke/ipp/issues"
  },
  "_id": "ipp@1.0.0",
  "dist": {
    "shasum": "11f424b5f1f89006511cab8fe5baa89ae8393dcb"
  },
  "_from": "ipp@",
  "_resolved": "https://registry.npmjs.org/ipp/-/ipp-1.0.0.tgz"
}
